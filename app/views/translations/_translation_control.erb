<form id="lingua-franca-translation-form">
	<div>
		<h2></h2>
		<div class="enable-translation">
			<div class="uses-default-value">
				<p><%= _'translate.pages.uses_default_value' %></p>
				<button name="use-custom-value"><%= _'translate.pages.use_custom_value' %></button>
			</div>
			<div class="uses-custom-value">
				<p><%= _'translate.pages.uses_custom_value' %></p>
				<button name="use-default-value"><%= _'translate.pages.use_default_value' %></button>
			</div>
		</div>
		<div class="translation-control">
			<div id="translation-value" contenteditable lang="<%= @locale[:code] %>"></div>
			<div id="translation-control-variables">
				<strong>Variables:</strong>
				<div class="variables"></div>
			</div>
			<button type="submit">Save</button>
		</div>
	</div>
</form>
<div class="translation-examples">
	<div class="example-list">
		<ul></ul>
	</div>
	<a href="#" class="change-example prev-example"></a>
	<a href="#" class="change-example next-example"></a>
</div>
<script>window.jQuery || document.write('<script src="https://code.jquery.com/jquery-2.1.3.min.js"><\/script>')</script>
<script>
function LinguaFranca(_data) {
	var lf = this;

	lf.data = _data;

	$('.lingua-franca-link a').click(function() {
		lf.select_key($(this).attr('href').substr(1));
	})
	if (window.location.hash) {
		lf.select_key(window.location.hash.substr(1));
	}
	lf.updateVars();
	$('#translation-value').keyup(function() {
		lf.updateVars();
		lf.checkModifiedState();
	});
	$('#lingua-franca-translation-form .uses-default-value button').keydown(function(e){
		switch (e.keyCode) {
			case 38:
				lf.selectPrev();
				return;
			case 40:
				lf.selectNext();
				return;
		}
	});
	$('#translation-value').keyup(function(e){
		if ((e.keyCode == 18 || e.altKey) && (e.keyCode == 16 || e.shiftKey)) {
			return;
		}
		$('#translation-control-variables.showkeys').removeAttr('class');
	});
	$('#translation-value').keydown(function(e){
		if ((e.keyCode == 18 || e.altKey) && (e.keyCode == 16 || e.shiftKey)) {
			var c = String.fromCharCode(e.keyCode);
			var num = c ? lf.HOT_KEYS.indexOf(c) : -1;
			if (num >= 0) {
				var $varBtn = $('.variable-btn[data-hotkey="' + c + '"]');
				if ($varBtn.length > 0) {
					$varBtn.click();
					return;
				}
			}
			$('#translation-control-variables').attr('class', 'showkeys');
		}
		switch (e.keyCode) {
			case 13:
				e.preventDefault();
				if (lf.checkModifiedState()) {
					lf.save(function() { lf.selectNext(e.shiftKey); });
				} else {
					lf.selectNext(e.shiftKey)
				}
				return;
			case 38:
				e.preventDefault();
				lf.selectPrev();
				return;
			case 40:
				e.preventDefault();
				lf.selectNext();
				return;
		}
	});
	$('#lingua-franca-translation-form .uses-custom-value button').click(function(e) {
		e.preventDefault
		lf.enableTranslation(false);
		lf.save();
	});
	$('#lingua-franca-translation-form .uses-default-value button').click(function(e) {
		e.preventDefault
		lf.enableTranslation(true);
	});
	$('#lingua-franca-translation-form').submit(function(e) { e.preventDefault(); });
	$('#lingua-franca-translation-form button[type="submit"]').click(function(e) {
		e.preventDefault();
		lf.save();
	});
	$('.selectable-key > td > a').each(function() {
		var $this = $(this);
		var key = $this.attr('href').substr(1);
		var value = false;
		if (!lf.data[key]) {
			var parentKey = key.replace(/^(.*)\.[^\.]+$/, '$1');
			if (lf.data[parentKey] && lf.data[parentKey].value && typeof lf.data[parentKey].value == "object") {
				var subkey = key.replace(/^.*\.([^\.]+)$/, '$1');
				value = lf.data[parentKey].value[subkey];
				key = parentKey;
			}
		} else {
			value = lf.data[key].value;
		}
		value === false || $this.html(lf.createTranslationData(key, value, true));
	});
	$('.lingua-franca-translations .translation-examples').click(function(event) {
		event.preventDefault();
		event.stopPropagation();
		var $this = $(this);
		if (!$this.hasClass('open')) {
			$this.addClass('open');
		}
	});
	$('.lingua-franca-translations .translation-examples .change-example').click(function() {
		event.preventDefault();
		var goLeft = $(this).hasClass('prev-example');
		var $examples = $('.lingua-franca-translations .translation-examples li');
		var $firstExample = $examples.first();
		var margin = Number.parseInt($firstExample[0].style.marginLeft) || 0;
		
		margin += (goLeft ? 1 : -1) * 100;

		var max = ($examples.length - 1) * -100;
		if (margin > 0) {
			margin = 0;
		} else if (margin < max) {
			margin = max;
		}

		$firstExample.css('margin-left', margin + '%');
	});
	$('body').click(function(event) {
		if ($('.lingua-franca-translations .translation-examples.open').length > 0) {
			event.preventDefault();
			event.stopPropagation();
			$('.lingua-franca-translations .translation-examples.open').removeClass('open');
		}
	});
}
LinguaFranca.prototype = {
	COUNT: 'count',
	COUNT_ABBR: '##',
	DEFAULT_TEXT: '<span class="default-value"><%= _"translate.pages.default_value" %></span>',
	UNDEFINED_TEXT: '<span class="undefined"><%= _"translate.pages.undefined" %></span>',
	HOT_KEYS: '1234567890QWERTYUOPASDFGHJKLZXCVBNM',

	_keyListSelector: '.lingua-franca-key-wrapper',
	_saveUrl: '/translations/:locale/store',
	_locale: '<%= @locale[:code] %>',

	data: [],

	select_key: function(key) {
		var lf = this;
		var is_plural = !!$('[data-key="' + key + '"].plural-key').length;
		var data = lf.data[is_plural ? key.replace(/^(.*)\.(.*?)$/, '$1') : key];
		if (data) {
			$('#lingua-franca-translation-form h2').html(key);
			$('#lingua-franca-keys [data-key]').removeClass('selected');
			$('#lingua-franca-keys [data-key="' + key + '"]').addClass('selected');
			lf.setVariables(data['vars']);
			var value = data['value'];
			$('#lingua-franca-translation-form').removeAttr('class');
			var fullkey = key;
			if (is_plural) {
				var subkey = key.replace(/^(.*)\.(.*?)$/, '$2');
				value = value[subkey];
				key = key.replace(/^(.*)\.(.*?)$/, '$1');
				if (subkey == 'zero' && data['zero_optional']) {
					lf.enableTranslation(value !== null);
				}
			}
			lf.setTranslationData(key, value);
			lf.moveToEnd();
			if (window.location.hash != ('#' + fullkey)) {
				window.location.hash = ('#' + fullkey);
				lf.showKey($('#lingua-franca-keys [data-key].selected'));
			}
			lf.checkModifiedState();

			var $exampleWrapper = $('.lingua-franca-translations .translation-examples');
			var $examples = $('.lingua-franca-translations .translation-examples ul');
			$examples.empty();
			if (data.examples && data.examples.length > 0) {
				for (var i = 0; i < data.examples.length; i++) {
					$examples.append('<li><iframe class="example-page" src="/translations/examples/' + key + '/' + data.examples[i] + '" frameborder="0" allowtransparency="yes"></iframe></li>');
				}
				$exampleWrapper.removeClass('empty');
			} else if (!$exampleWrapper.hasClass('empty')) {
				$exampleWrapper.addClass('empty');
			}
		}
	},
	insertVar: function(event, object) {
		event.preventDefault();
		var lf = this;
		var $this = $(object);
		if ($this.is(":disabled")) {
			return;
		}
		$('#translation-value').focus();
		var value = $this.html();
		var varname = $this.data().varname;
		var html = lf.createVariable(value, false, value == '%{' + varname + '}' ? undefined : '%' + varname, $this.hasClass('special'));
		lf.pasteHtmlAtCaret(html);
	},

	moveToEnd: function() {
		var $editor = $('#translation-value');
		$editor.focus();
		if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
			var range = document.createRange();
			range.selectNodeContents($editor[0]);
			range.collapse(false);
			var sel = window.getSelection();
			sel.removeAllRanges();
			sel.addRange(range);
		} else if (typeof document.body.createTextRange != "undefined") {
			var textRange = document.body.createTextRange();
			textRange.moveToElementText($editor);
			textRange.collapse(false);
			textRange.select();
		}
	},

	getVarDisplayName: function(varName) {
		if (varName == this.COUNT) {
			return this.COUNT_ABBR;
		}
		return varName;
	},

	getVarRealName: function(varName) {
		if (varName == this.COUNT_ABBR) {
			return this.COUNT;
		}
		return varName;
	},

	isSpecialVar: function(varName) {
		return !!varName.match(new RegExp('(' + this.COUNT_ABBR + '|' + this.COUNT + ')'));
	},

	createVariable: function(varName, span, realName, is_special) {
		cssClass = '';
		if (is_special || this.isSpecialVar(varName)) {
			cssClass = 'special'
		}
		var varDisplayName;
		if (realName) {
			varDisplayName = varName;
			varName = realName;
		} else {
			varDisplayName = this.getVarDisplayName(varName);
			varName = '%{' + varName + '}';
		}
		if (span) {
			return '<span class="variable' + (cssClass ? ' ' + cssClass : '') + '">' + varDisplayName + '</span>';
		}
		return '<input type="button" value="' + varDisplayName + (cssClass ? '" class="' + cssClass : '') + '" disabled data-varname="' + varName + '">';
	},

	updateVars: function() {
		var lf = this;
		$('#translation-control-variables .variable-btn').each(function() {
			var $this = $(this);
			var used = $('#translation-value input[value="' + lf.getVarDisplayName($this.html()) + '"]').length ? 1 : 0;
			$this.prop("disabled", used);
		});
	},

	pasteHtmlAtCaret: function(html) {
		var sel, range;
		var lf = this;
		if (window.getSelection) {
			// IE9 and non-IE
			sel = window.getSelection();
			if ($(sel.focusNode).closest('#translation-value').length < 1) {
				$('#translation-value').focus();
				setTimeout(lf.pasteHtmlAtCaret(html), 100);
				return;
			}
			if (sel.getRangeAt && sel.rangeCount) {
				range = sel.getRangeAt(0);
				range.deleteContents();

				// Range.createContextualFragment() would be useful here but is
				// only relatively recently standardized and is not supported in
				// some browsers (IE9, for one)
				var el = document.createElement("div");
				el.innerHTML = html;
				var frag = document.createDocumentFragment(), node, lastNode;
				while ( (node = el.firstChild) ) {
					lastNode = frag.appendChild(node);
				}
				var firstNode = frag.firstChild;
				range.insertNode(frag);

				// Preserve the selection
				if (lastNode) {
					range = range.cloneRange();
					range.setStartAfter(lastNode);
					range.collapse(true);
					sel.removeAllRanges();
					sel.addRange(range);
				}
			}
		} else if ( (sel = document.selection) && sel.type != "Control") {
			// IE < 9
			var originalRange = sel.createRange();
			originalRange.collapse(true);
			sel.createRange().pasteHTML(html);
		} else {
			$('#translation-value').focus();
			setTimeout(lf.pasteHtmlAtCaret(html), 100);
			return;
		}
		lf.updateVars();
	},

	getTranslationData: function() {
		var $data = $('#translation-value').clone();
		var lf = this;
		$data.find('input').replaceWith(function() {
			return $(this).data().varname;//lf.getVarDisplayName($(this).attr('value')) + '}';
		});
		return $data.text();
	},

	setVariables: function(vars) {
		var lf = this;
		var data = lf.getTranslationData();
		var keys = (vars && typeof vars.length == "undefined") ? Object.keys(vars) : null;
		var $vars = $('#translation-control-variables .variables');
		$vars.empty();
		if (vars && (keys || vars).length) {
			for (var i = 0; i < (keys || vars).length; i++) {
				$vars.append(keys ? lf.createVarBtn(vars[keys[i]], keys[i]) : lf.createVarBtn(vars[i]));
			}
		} else {
			$vars.html('<em>None</em>');
		}
		var selectedKey = lf.getSelectedKey();
		if (!selectedKey) {
			return;
		}
		lf.setTranslationData(selectedKey, data);
	},

	getSelectedKey: function(fullkey) {
		var $key = $('#lingua-franca-keys [data-key].selected');
		if ($key.length < 1) {
			return null;
		}
		var key = $key.data().key;
		if (!fullkey && $key.hasClass('plural-key')) {
			return key.replace(/^(.*)\.(.*?)$/, '$1');
		}
		return key;
	},

	createVarBtn: function(varName, realName) {
		var cssClass = 'variable-btn';
		if (realName || this.isSpecialVar(varName)) {
			cssClass += ' special';
		}
		var varDisplayName;
		if (realName) {
			varDisplayName = varName;
			varName = realName;
		} else {
			varDisplayName = this.getVarDisplayName(varName);
			varName = '%{' + varName + '}';
		}
		var hotKey = this.HOT_KEYS[$('#translation-control-variables .variables').children().length];
		return '<button onclick="linguaFranca.insertVar(event, this)" class="' + cssClass + '" title="Alt+Shift+' + hotKey + '" data-varname="' + varName + '" data-hotkey="' + hotKey + '">' + varDisplayName + '</button> ';
	},

	setTranslationData: function(key, data) {
		var lf = this;
		$('#translation-value').html(lf.createTranslationData(key, data));
		lf.updateVars();
	},

	createTranslationData: function(key, value, variable_spans) {
		if (typeof(value) == "undefined" || value == null) {
			return variable_spans ? (
					key.match(/\.zero$/) && this.data[key].count ?
					this.DEFAULT_TEXT : this.UNDEFINED_TEXT) : '';
		}
		var lf = this;
		var vars = lf.data[key].vars || [];
		var keys = (vars && typeof vars.length == "undefined") ? Object.keys(vars) : null;
		for (var i = 0; i < (keys || vars).length; i++) {
			var varName = keys ? vars[keys[i]] : lf.getVarRealName(vars[i]);
			value = value.replace(new RegExp(keys ? ('%' + keys[i]) : ('%{' + varName + '}'), 'g'), lf.createVariable(varName, variable_spans, keys && !variable_spans ? ('%' + keys[i]) : undefined, !!keys));
		}
		return value;
	},

	enableTranslation: function(doEnable) {
		$('#lingua-franca-translation-form').attr('class', 'optional ' + (doEnable ? 'enabled' : 'disabled'));
		if (doEnable) {
			$('#translation-value').focus();
		} else {
			$('#lingua-franca-translation-form .uses-default-value button').focus();
		}
		/// TODO: Save the translation
	},

	selectNext: function(prev) {
		var next = $('#lingua-franca-keys [data-key].selected')[0];
		if (typeof(prev) == "undefined") {
			prev = false;
		}
		while ((next = $(next)[prev ? 'prev' : 'next']()[0] || $('#lingua-franca-keys [data-key]')[prev ? 'last' : 'first']()[0]) && !$(next).hasClass('selectable-key'));
		var $next = $(next);
		this.select_key($next.data().key);
	},
	
	selectPrev: function() {
		this.selectNext(true);
	},

	showKey: function($key) {
		$scroller = $(this._keyListSelector);
		if ($key.position().top < $scroller.scrollTop() || $key.position().top + $key.height() > $scroller.scrollTop() + $scroller.height()) {
			$key[0].scrollIntoView();
    	}
	},

	save: function(fn) {
		var lf = this;
		var $button = $('#lingua-franca-translation-form button[type="submit"]');
		var $loader = $('#lingua-franca-translation-form > div');
		$loader.attr('class', 'storing');
		$button.prop("disabled", true);
		var post_data = {data: {}};
		var key = this.getSelectedKey();

		if (!key) {
			this.showError('no_key_selected');
			return;
		}

		var fullkey = key;
		var subkey = null;
		if (lf.data[key]['count']) {
			fullkey = this.getSelectedKey(true);
			subkey = fullkey.substr(key.length + 1);
			if (subkey == 'zero' && $('#lingua-franca-translation-form.optional.disabled').length) {
				post_data['data'][fullkey] = null;
				post_data['remove'] = {};
				post_data['remove'][fullkey] = true;
			} else {
				post_data['data'][fullkey] = this.getTranslationData();
			}
		} else if (lf.data[key]['array']) {
			subkey = $('.selectable-key.selected').data().key.replace(/^.*\.([^\.]+)$/, '$1');
			post_data['data'][key] = lf.getTranslationData();
			post_data['index'] = subkey;
			//fullkey = key + '.' + subkey;
		} else {
			post_data['data'][key] = this.getTranslationData();
		}
		var url = this._saveUrl.replace(/\/:locale\//, '/' + this._locale + '/');
		var $auth_token = $('meta[name="csrf-token"]');
		if ($auth_token.length) {
			url += '?authenticity_token=' + encodeURIComponent($auth_token.attr('content'));
		}
		$.post(url, post_data, function(result) {
			if (result.error_message || result.locale != lf._locale || result.data[fullkey] == "undefined" || (!result.data[fullkey] && !post_data['remove'][fullkey])) {
				lf.showError(result.error_message || 'error');
				if (!result.data[fullkey]) {
					return;
				}
			}
			var new_value = null;
			if (subkey) {
				lf.data[key]['value'][subkey] = result.data[fullkey];
			} else {
				lf.data[key]['value'] = result.data[key];
			}
			if (typeof result.data[fullkey] == "object") {
				var keys = Object.keys(result.data[fullkey]);
				for (var i = 0; i < keys.length; i++) {
					$('[data-key="' + fullkey + '.' + i +'"] td a').html(lf.createTranslationData(key, result.data[fullkey][i], true));
				}
			} else {
				$('[data-key="' + fullkey + '"] td a').html(lf.createTranslationData(key, result.data[fullkey], true));
			}
			if (fn) {
				fn();
			}
		}, 'json').always(function() {
			lf.checkModifiedState();
			$loader.removeAttr('class');
		});
	},

	checkModifiedState: function() {
		var lf = this;
		if ($('#lingua-franca-translation-form > div[class]').length) {
			return;
		}
		var selectedKey = lf.getSelectedKey();
		if (!selectedKey) {
			return false;
		}
		var changed = (lf.getTranslationData() != lf.data[selectedKey]['value']);
		$('#lingua-franca-translation-form button[type="submit"]').prop("disabled", !changed);
		$('#lingua-franca-translation-form').attr('data-modified', changed ? '1' : '0');
		return changed;
	},

	showError: function(error_message) {
		/// TODO: make this visible to the user
		console.log(error_message);
	}

};
var linguaFranca;
$(document).ready(function() {
	linguaFranca = new LinguaFranca(<%= @translation_info.to_json.to_s.html_safe %>);
})
</script>
